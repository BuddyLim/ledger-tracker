AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  backend

  Sample SAM Template for backend

Parameters:
  SourceBucketName:
    Type: String
  DBUser:
    Type: String
  DBPwd:
    Type: String
  DBIp:
    Type: String
  DBName:
    Type: String

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      # TODO: Whitelist specific origin
      AllowOrigin: "'*'"
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
  Function:
    Timeout: 30
    MemorySize: 128
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
Resources:
  UploadRequestFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/upload_request/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref LedgerImageBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref LedgerImageBucket
      Events:
        Generate:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /request
            Method: post

  LedgerImageCreationSQSConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/image_creation_consumer/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref LedgerImageBucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref LedgerImageBucket
        - Statement:
            - Effect: Allow
              Action: "bedrock:*"
              Resource: "*"
      Events:
        LedgerS3ImagePutEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt LedgerS3ImagePutQueue.Arn
            BatchSize: 10

  DBCRUDFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/db_handler/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_USER: !Ref DBUser
          DB_PWD: !Ref DBPwd
          DB_IP: !Ref DBIp
          DB_NAME: !Ref DBName
      Events:
        AddTransactions:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /transactions/add
            Method: post
        GetTransactionsPOST:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /transactions
            Method:
              - post
        GetTransactionsGET:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /transactions
            Method:
              - get
        AddNewUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users/new
            Method:
              - post

  LedgerImageBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - LedgerS3PutSNSTopicPolicy
    Properties:
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Topic: !Ref LedgerS3PutSNSTopic
      BucketName: !Ref SourceBucketName
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: LedgerImageBucket

  LedgerS3PutSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub LedgerS3PutSNS-Topic-${AWS::AccountId}

  LedgerS3PutSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sns:Publish
            Resource: !Ref LedgerS3PutSNSTopic
            Condition:
              ArnEquals:
                aws:SourceArn:
                  !Join ["", ["arn:aws:s3:::", !Ref SourceBucketName]]
              StringEquals:
                aws:SourceAccount: !Ref "AWS::AccountId"
      Topics:
        - !Ref LedgerS3PutSNSTopic

  ### SQS
  LedgerS3ImagePutQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: LedgerS3ImagePutQueue

  LedgerS3SNSToSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: "Allow SNS publish to SQS"
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource: !GetAtt LedgerS3ImagePutQueue.Arn
            Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref LedgerS3PutSNSTopic
      Queues:
        - Ref: LedgerS3ImagePutQueue

  ###########################
  ##   SNS Subscriptions   ##
  ###########################
  ###########################
  ##   SNS Filter Policy   ##
  ###########################
  LedgerImageQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LedgerS3ImagePutQueue.Arn
      Protocol: sqs
      RawMessageDelivery: True
      TopicArn: !Ref LedgerS3PutSNSTopic

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Outputs:
  LedgerTrackerAPI:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/ledgertracker/"
  UploadRequestFunction:
    Description: Upload Request Lambda Function ARN
    Value: !GetAtt UploadRequestFunction.Arn
  UploadRequestFunctionIamRole:
    Description: Implicit IAM Role created for Upload Request function
    Value: !GetAtt UploadRequestFunction.Arn
  DBCRUDFunction:
    Description: Handles CRUD function for the database
    Value: !GetAtt DBCRUDFunction.Arn
  DBCRUDFunctionIamRole:
    Description: Implicit IAM Role created for DB Handler function
    Value: !GetAtt DBCRUDFunction.Arn
  LedgerImageBucket:
    Description: S3 Bucket Name
    Value: !Ref LedgerImageBucket
  LedgerS3PutSNSTopic:
    Description: Ledger SNS Topic name
    Value: !Ref LedgerS3PutSNSTopic
  LedgerS3ImagePutQueue:
    Description: SNS queue name
    Value: !GetAtt LedgerS3ImagePutQueue.QueueName
  LedgerS3ImagePutQueueARN:
    Description: SQS queue ARN
    Value: !GetAtt LedgerS3ImagePutQueue.Arn
